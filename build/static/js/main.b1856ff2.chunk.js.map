{"version":3,"sources":["data.js","components/Styled/SectionContent.js","components/Dropdown/Dropdown.jsx","services/serviceUris.js","services/baseService.js","services/boxService.js","components/BoxForm/BoxForm.js","components/Styled/TableContent.js","components/Grid/Grid.js","components/Boxes/Boxes.js","App.js","store.js","serviceWorker.js","index.js"],"names":["data","id","receiverName","weight","colour","country","shippingCost","allCountries","text","SectionContent","styled","div","Dropdown","idField","textField","selected","onChange","placeholder","width","requiredActive","disabled","isMulti","useState","optionData","setOptionData","selectedOption","setSelectedOption","styles","option","provided","state","style","useEffect","options","length","map","v","i","itemId","itemName","label","value","selectedOptions","String","split","f","push","filter","Fragment","name","isDisabled","className","undefined","noOptionsMessage","defaultProps","BOXES","headers","axios","interceptors","response","use","error","errorHandler","window","Promise","reject","config","hasOwnProperty","errorHandle","showMessage","Message","ExceptionMessage","statusText","message","toast","toString","fullUrl","uri","baseService","get","then","res","post","params","JSON","stringify","boxService","getBoxes","uris","saveBoxes","box","BoxForm","defaultBoxInformation","rgbColorValue","defaultBoxInfo","setDefaultBoxInfo","handleOnChange","obj","old","getRgbValue","match","parseInt","join","validate","htmlFor","type","e","target","min","stopPropagation","color","onClick","success","TableContent","Grid","result","unModifiedResult","setUnModifiedResult","setdata","Rows","mappedColumns","Columns","element","Header","Caption","accessor","Name","disableSortBy","Sortable","Type","cssClass","CssClass","conditionalStyling","isBackgroundColour","BackgroundColour","hideColumns","item","Visible","columns","React","hiddenColumns","useTable","disableSortRemove","initialState","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","key","original","RowClick","cells","cell","backgroundColor","getCellProps","Box","boxes","setBoxes","IsKey","RowCount","App","to","path","store","configureStore","reducer","Boolean","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iSAAWA,G,MAAO,CAChB,CACEC,GAAI,EACJC,aAAc,YACdC,OAAQ,IACRC,OAAQ,gBACRC,QAAS,SACTC,aAAc,MAEhB,CACEL,GAAI,EACJC,aAAc,YACdC,OAAQ,GACRC,OAAQ,gBACRC,QAAS,SACTC,aAAc,MAEhB,CACEL,GAAI,EACJC,aAAc,WACdC,OAAQ,IACRC,OAAQ,gBACRC,QAAS,SACTC,aAAc,QAGLC,EAAe,CAC1B,CACEN,GAAI,EACJO,KAAM,UAER,CACEP,GAAI,EACJO,KAAM,SAPkB,CAU1B,CACEP,GAAI,EACJO,KAAM,UAER,CACEP,GAAI,EACJO,KAAM,c,gBChCKC,EARQC,IAAOC,IAAV,oJ,eCCdC,EAAW,SAAC,GAYX,IAXLX,EAWI,EAXJA,GACAD,EAUI,EAVJA,KACAa,EASI,EATJA,QACAC,EAQI,EARJA,UACAC,EAOI,EAPJA,SACAC,EAMI,EANJA,SACAC,EAKI,EALJA,YACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,eACAC,EAEI,EAFJA,SACAC,EACI,EADJA,QACI,EACgCC,mBAAS,MADzC,mBACGC,EADH,KACeC,EADf,OAEwCF,mBAAS,MAFjD,mBAEGG,EAFH,KAEmBC,EAFnB,KAGEC,EAAS,CACbC,OAAQ,SAACC,EAAUC,GACjB,OAAIA,EAAM9B,KAAK+B,MACN,2BAAKF,GAAaC,EAAM9B,KAAK+B,OAE7B,eAAKF,KAoClB,OAhCAG,qBAAU,WACR,IAAIC,EACFjC,EAAKkC,OAAS,EACVlC,EAAKmC,KAAI,SAACC,EAAGC,GACX,IAAMC,EAASzB,EAAUuB,EAAEvB,GAAWuB,EAChCG,EAAWzB,EAAYsB,EAAEtB,GAAasB,EAC5C,OAAIA,EAAEL,MACG,CAAES,MAAOD,EAAUE,MAAOH,EAAQP,MAAOK,EAAEL,OAE3C,CAAES,MAAOD,EAAUE,MAAOH,MAGrC,GACNd,EAAcS,GACd,IAAIS,EAAkB,GAClB3B,IACsB,kBAAbA,EACa4B,OAAO5B,GAAU6B,MAAM,KAC7BT,KAAI,SAACC,GACnBH,EAAQE,KAAI,SAACU,GACPA,EAAEJ,QAAUL,GAAGM,EAAgBI,KAAKD,SAI5CH,EAAkBT,EAAQc,QAAO,SAACX,GAChC,OAAOA,EAAEK,QAAU1B,MAIzBW,EAAkBgB,KACjB,CAAC1C,EAAMe,IAGR,cAAC,IAAMiC,SAAP,UACGzB,GACC,cAAC,IAAD,CACE0B,KAAMhD,EACNgC,QAASV,EACTP,SAAUA,EACVyB,MAAOhB,EACPyB,WAAY9B,EACZ+B,UAAWhC,EAAiB,kBAAoB,GAChDF,YAAaA,EACbI,QAASA,EACTM,OAAQA,EACRI,MAAO,CAAEb,MAAOA,QAAgBkC,GAChCC,iBAAkB,iBAAM,6BAmBlCzC,EAAS0C,aAAe,CACtBtD,KAAM,GACNa,QAAS,KACTC,UAAW,KACXC,SAAU,GACVE,YAAa,IACbE,gBAAgB,GAGHP,QCrGF2C,EAAQ,Q,iBCIfC,EAAU,CACd,eAAgB,kCAChB,YAAa,OACb,mBAAoB,kBAEtBC,IAAMC,aAAaC,SAASC,KAC1B,SAACD,GACC,OAAOA,KAET,SAACE,GAEC,OADAC,EAAaD,GACNE,OAAOC,QAAQC,OAAOJ,MAIjC,I,EAAMC,EAAe,SAACD,GAGlBA,EAAMK,OAAOC,eAAe,iBACC,IAA7BN,EAAMK,OAAOE,aAKXP,EAAMF,WACJE,EAAMF,SAAS3D,KAAKmE,eAAe,oBACrCE,EACER,EAAMF,SAAS3D,KAAKsE,QAClB,IACAT,EAAMF,SAAS3D,KAAKuE,iBACpB,KAEKV,EAAMF,SAAS3D,KAAKmE,eAAe,WAC5CE,EAAYR,EAAMF,SAAS3D,KAAKsE,SACvBT,EAAMF,SAASa,YACxBH,EAAYR,EAAMF,SAASa,cAI3BH,EAAc,SAACI,GAAD,OAAaC,IAAMb,MAAMY,EAAQE,aAC/CC,EAAU,SAACC,GAAD,MA1CG,yBA0CmBA,GAcvBC,EAbK,CAClBC,IAAK,SAACF,EAAKX,GACT,OAAOT,IACJsB,IAAIH,EAAQC,GADR,aACgBrB,QAASA,GAAYU,IACzCc,MAAK,SAACC,GAAD,OAASA,EAAIjF,SAEvBkF,KAAM,SAACL,EAAKM,EAAQjB,GAClB,OAAOT,IAAMyB,KAAKN,EAAQC,GAAMO,KAAKC,UAAUF,GAAxC,aACL3B,QAASA,GACNU,MC3CMoB,EARI,CACjBC,SAAU,WACR,OAAOT,EAAYC,IAAIS,IAEzBC,UAAW,SAACC,GACV,OAAOZ,EAAYI,KAAKM,EAAYxF,KCyIzB2F,EAzIC,WACd,IAAMC,EAAwB,CAC5B1F,aAAc,GACdC,OAAQ,GACRC,OAAQ,GACRyF,cAAe,GACfxF,QAAS,GANS,EAQwBiB,mBAAS,IARjC,mBAQbwE,EARa,KAQGC,EARH,KASpB/D,qBAAU,WACR+D,EAAkBH,KACjB,IACH,IAAMI,EAAiB,SAACC,GACtBF,GAAkB,SAACG,GAAD,mBAAC,eAAcA,GAAQD,OAEvCE,EAAc,SAAC/F,GACjB,IAAIqC,EAAQrC,EAAOgG,MAAM,mBAIzB,OAHA3D,EAAQA,EAAMN,KAAI,SAAUC,GAC1B,OAAOiE,SAASjE,EAAG,QAERkE,KAAK,MAWdC,EAAW,WACf,OACGT,EAAe5F,cACf4F,EAAe3F,QACf2F,EAAe1F,QACf0F,EAAezF,UAIPyF,EAAe3F,OAAS,KACjCuE,IAAMb,MAAM,qCACL,IAJPa,IAAMb,MAAM,kCACL,IAOX,OACE,eAAC,IAAMb,SAAP,WACE,cAAC,EAAD,UACE,sBAAKG,UAAU,gBAAgBpB,MAAO,CAAEb,MAAO,OAA/C,UACE,qBAAKiC,UAAU,gBAAf,+BACA,sBAAKA,UAAU,aAAf,UACE,uBAAOqD,QAAQ,OAAOrD,UAAU,WAAhC,kBAGA,uBACElD,GAAG,OACHwG,KAAK,OACLhE,MAAOqD,EAAe5F,aACtBc,SAAU,SAAC0F,GACT,IAAI1G,EAAI,2BACH8F,GADG,IAEN5F,aAAcwG,EAAEC,OAAOlE,QAEzBuD,EAAehG,SAIrB,sBAAKmD,UAAU,aAAf,UACE,uBAAOqD,QAAQ,SAASrD,UAAU,WAAlC,6BAGA,uBACElD,GAAG,SACHwG,KAAK,SACLG,IAAI,IACJnE,MAAOqD,EAAe3F,OACtBa,SAAU,SAAC0F,GACT,IAAI1G,EAAI,2BACH8F,GADG,IAEN3F,OAAQuG,EAAEC,OAAOlE,QAEnBuD,EAAehG,SAIrB,sBAAKmD,UAAU,aAAf,UACE,uBAAOqD,QAAQ,SAASrD,UAAU,WAAlC,wBAGA,uBACElD,GAAG,SACHwG,KAAK,QACLhE,MAAOqD,EAAe1F,OACtBY,SAAU,SAAC0F,GACTA,EAAEG,kBACF,IAAMC,EAAQJ,EAAEC,OAAOlE,MACnBzC,EAAI,2BACH8F,GADG,IAEN1F,OAAQ0G,EACRjB,cAAeM,EAAYW,KAE7Bd,EAAehG,SAIrB,sBAAKmD,UAAU,aAAf,UACE,uBAAOqD,QAAQ,gBAAgBrD,UAAU,WAAzC,qBAGA,cAAC,EAAD,CACElD,GAAG,gBACHD,KAAMO,EACNM,QAAQ,KACRC,UAAU,OACVI,MAAM,OACNH,SAAU+E,EAAezF,QACzBW,SAAU,SAACiF,GACT,IAAIjG,EAAI,2BAAQ8F,GAAR,IAAwBzF,QAAS4F,EAAIxD,QAC7CuD,EAAehG,SAIrB,wBACEmD,UAAU,uBACV4D,QAvGM,WAOd,OANIR,KACFjB,EAAWG,UAAUL,KAAKC,UAAUS,IAAiBd,MAAK,WACxDN,IAAMsC,QAAQ,sBACdjB,EAAkB,QAGf,GAiGCU,KAAK,SAHP,uBASJ,cAAC,IAAD,Q,QC1ESQ,EAjEMvG,IAAOC,IAAV,44CCyHHuG,G,MApHF,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACqB7F,mBAAS6F,GAD9B,mBACpBC,EADoB,KACFC,EADE,OAEH/F,mBAAS,IAFN,mBAEpBtB,EAFoB,KAEdsH,EAFc,KAG3BtF,qBAAU,WACRqF,EAAoBF,GACpBG,EAAQH,EAAOI,QACd,CAACJ,IACJ,IAAIK,EAAgBJ,EAAiBK,QAAQtF,KAAI,SAACuF,GAAD,MAAc,CAC7DC,OAAQD,EAAQE,QAChBC,SAAUH,EAAQI,KAClBC,eAAgBL,EAAQM,SACxBvB,KAAMiB,EAAQO,KACdC,SAAUR,EAAQS,SAClBC,mBAAoBV,EAAQU,oBAAsB,KAClDC,mBAAoBX,EAAQY,qBAE1BC,EAAcnB,EAAiBK,QAAQtF,KAAI,SAACqG,GAC9C,IAAKA,EAAKC,QACR,OAAOD,EAAKV,QAGZY,EAAUC,WAAc,kBAAMnB,IAAe,IAC7CoB,EAAgBD,WAAc,kBAAMJ,IAAa,IAtB1B,EAyBzBM,mBACE,CACEH,UACA1I,OACA8I,mBAAmB,EACnBC,aAAc,CACZH,cAAeA,IAGnBI,aAVIC,EAxBmB,EAwBnBA,cAAeC,EAxBI,EAwBJA,kBAAmBC,EAxBf,EAwBeA,aAAcC,EAxB7B,EAwB6BA,KAAMC,EAxBnC,EAwBmCA,WAY9D,OACE,cAAC,WAAD,UACE,cAAC,EAAD,UACE,kDAAWJ,KAAX,IAA4B9F,UAAU,kBAAtC,UACE,gCACGgG,EAAahH,KAAI,SAACmH,GAAD,OAChB,8CAAQA,EAAYC,uBAApB,aACGD,EAAY9F,QAAQrB,KAAI,SAACqH,GAAD,OACvB,+CAAQA,EAAOC,eAAeD,EAAOE,yBAArC,cACGF,EAAOG,OAAO,UACf,cAAC,WAAD,UACGH,EAAOI,UACN,+BAAOJ,EAAOK,aAAe,gBAAQ,mCAQnD,iDAAWX,KAAX,aACIE,EAAKlH,OAAS,GACdkH,EAAKjH,KAAI,SAAC2H,EAAKzH,GAEb,OADAgH,EAAWS,GAET,cAAC,WAAD,UACE,wDACMA,EAAIC,eADV,IAEEC,IAAG,cAAS3H,GACZ0E,QACE+C,EAAIG,SAAS9B,UACa,aAA1B2B,EAAIG,SAAS9B,SACT,aACA,WACEf,EAAiB8C,UACf9C,EAAiB8C,SAASJ,EAAIG,WAGxC9G,UAAW2G,EAAIG,SAAS9B,WAEvB2B,EAAIK,MAAMhI,KAAI,SAACiI,GACd,OACE,4CACErI,MACEqI,EAAKZ,OAAOnB,mBACR,CACEgC,gBAAgB,OAAD,OAASP,EAAIG,SAAS7J,OAAtB,MAEjB,GAEN+C,UACEiH,EAAKZ,OAAOtB,SAAZ,UAEqC,OAAnCkC,EAAKZ,OAAOpB,mBACR,IACAgC,EAAKZ,OAAOpB,mBAAmB0B,EAAKM,GACpC,KAGJA,EAAKE,gBAjBX,aAmBGF,EAAK3H,MAAQ2H,EAAKT,OAAO,QAAU,aApCzBtH,OA4CzB,6BACE,oBAAIc,UAAU,cAAd,oCC3CDoH,G,MA9DH,WAAO,IAAD,EACUjJ,mBAAS,IADnB,mBACTkJ,EADS,KACFC,EADE,KAGhBzI,qBAAU,WACRuD,MACC,IAEH,IAAI4B,EAAS,CACXS,QAAS,kBACTH,QAAS,CACP,CACEK,KAAM,KACNF,QAAS,KACTa,SAAS,EACTiC,OAAO,GAET,CACE5C,KAAM,eACNF,QAAS,eACTa,SAAS,GAEX,CACEX,KAAM,SACNF,QAAS,SACTa,SAAS,GAEX,CACEX,KAAM,SACNF,QAAS,SACTa,SAAS,EACTH,kBAAkB,GAEpB,CACER,KAAM,eACNF,QAAS,eACTa,SAAS,IAGbkC,SAAUH,EAAMtI,OAChBqF,KAAMiD,EACNN,SAAU,MAGN3E,EAAW,WAGfD,EAAWC,WAAWP,MAAK,SAACC,GAC1BwF,EAASxF,OAIb,OACE,cAAC,IAAMjC,SAAP,UACE,eAAC,EAAD,WACE,qBAAKG,UAAU,gBAAf,+BACA,qBAAKA,UAAU,sBAAf,SACE,cAAC,EAAD,CAAMgE,OAAQA,a,MC1BTyD,MA/Bf,WACE,OACE,sBAAKzH,UAAU,MAAf,UACE,2CACA,eAAC,IAAD,WACE,8BACE,+BACE,6BACE,cAAC,IAAD,CAAM0H,GAAG,UAAT,2BAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,aAAT,6BAIN,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,UAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,aAAZ,SACE,cAAC,EAAD,gB,QC3BCC,EAAQC,YAAe,CAClCC,QAAS,KCSSC,QACW,cAA7BnH,OAAOoH,SAASC,UAEe,UAA7BrH,OAAOoH,SAASC,UAEhBrH,OAAOoH,SAASC,SAAShF,MACvB,2DCVNiF,IAAS1B,OACP,cAAC,IAAM2B,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJQ,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3G,MAAK,SAAC4G,GAClCA,EAAaC,kB","file":"static/js/main.b1856ff2.chunk.js","sourcesContent":["export var data = [\r\n  {\r\n    id: 1,\r\n    receiverName: \"Aravindan\",\r\n    weight: 1.2,\r\n    colour: \"180, 180, 180\",\r\n    country: \"Sweden\",\r\n    shippingCost: 1.56,\r\n  },\r\n  {\r\n    id: 2,\r\n    receiverName: \"Receiver1\",\r\n    weight: 12,\r\n    colour: \"180, 180, 180\",\r\n    country: \"Sweden\",\r\n    shippingCost: 15.6,\r\n  },\r\n  {\r\n    id: 3,\r\n    receiverName: \"Receiver\",\r\n    weight: 1.2,\r\n    colour: \"180, 180, 180\",\r\n    country: \"Sweden\",\r\n    shippingCost: 1.56,\r\n  },\r\n];\r\nexport const allCountries = [\r\n  {\r\n    id: 1,\r\n    text: \"Sweden\",\r\n  },\r\n  {\r\n    id: 2,\r\n    text: \"China\",\r\n  },\r\n  ,\r\n  {\r\n    id: 3,\r\n    text: \"Brazil\",\r\n  },\r\n  {\r\n    id: 4,\r\n    text: \"Australia\",\r\n  },\r\n];\r\n","import styled from \"styled-components\";\r\n\r\nconst SectionContent = styled.div`\r\n  background: #ffffff;\r\n  box-sizing: border-box;\r\n  border-radius: 6px;\r\n  padding: 10px 20px;\r\n  margin: 0.5rem 0px;\r\n`;\r\n\r\nexport default SectionContent;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Select from \"react-select\";\r\nconst Dropdown = ({\r\n  id,\r\n  data,\r\n  idField,\r\n  textField,\r\n  selected,\r\n  onChange,\r\n  placeholder,\r\n  width,\r\n  requiredActive,\r\n  disabled,\r\n  isMulti,\r\n}) => {\r\n  const [optionData, setOptionData] = useState(null);\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  const styles = {\r\n    option: (provided, state) => {\r\n      if (state.data.style) {\r\n        return { ...provided, ...state.data.style };\r\n      } else {\r\n        return { ...provided };\r\n      }\r\n    },\r\n  };\r\n  useEffect(() => {\r\n    let options =\r\n      data.length > 0\r\n        ? data.map((v, i) => {\r\n            const itemId = idField ? v[idField] : v;\r\n            const itemName = textField ? v[textField] : v;\r\n            if (v.style) {\r\n              return { label: itemName, value: itemId, style: v.style };\r\n            } else {\r\n              return { label: itemName, value: itemId };\r\n            }\r\n          })\r\n        : [];\r\n    setOptionData(options);\r\n    let selectedOptions = [];\r\n    if (selected) {\r\n      if (typeof selected === \"string\") {\r\n        let splitParameters = String(selected).split(\"|\");\r\n        splitParameters.map((v) => {\r\n          options.map((f) => {\r\n            if (f.value === v) selectedOptions.push(f);\r\n          });\r\n        });\r\n      } else {\r\n        selectedOptions = options.filter((v) => {\r\n          return v.value === selected;\r\n        });\r\n      }\r\n    }\r\n    setSelectedOption(selectedOptions);\r\n  }, [data, selected]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {optionData && (\r\n        <Select\r\n          name={id}\r\n          options={optionData}\r\n          onChange={onChange}\r\n          value={selectedOption}\r\n          isDisabled={disabled}\r\n          className={requiredActive ? \"required-active\" : \"\"}\r\n          placeholder={placeholder}\r\n          isMulti={isMulti}\r\n          styles={styles}\r\n          style={{ width: width ? width : undefined }}\r\n          noOptionsMessage={() => \"no options available\"}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nDropdown.propTypes = {\r\n  id: PropTypes.string,\r\n  data: PropTypes.array,\r\n  idField: PropTypes.any,\r\n  textField: PropTypes.string,\r\n  selected: PropTypes.any,\r\n  onChange: PropTypes.func.isRequired,\r\n  placeholder: PropTypes.string,\r\n  requiredActive: PropTypes.bool,\r\n  isMulti: PropTypes.bool,\r\n  width: PropTypes.string,\r\n};\r\nDropdown.defaultProps = {\r\n  data: [],\r\n  idField: null,\r\n  textField: null,\r\n  selected: \"\",\r\n  placeholder: \" \",\r\n  requiredActive: false,\r\n};\r\n\r\nexport default Dropdown;\r\n","export const BOXES = \"Boxes\";\r\n","import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nconst baseApiUrl = \"http://localhost:8080/\";\r\n\r\nconst headers = {\r\n  \"Content-Type\": \"application/json; charset=utf-8\",\r\n  \"Data-Type\": \"json\",\r\n  \"X-Requested-With\": \"XMLHttpRequest\",\r\n};\r\naxios.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    errorHandler(error);\r\n    return window.Promise.reject(error);\r\n  }\r\n);\r\n//global http error handling\r\nconst errorHandler = (error) => {\r\n  // check for errorHandle config\r\n  if (\r\n    error.config.hasOwnProperty(\"errorHandle\") &&\r\n    error.config.errorHandle === false\r\n  ) {\r\n    return;\r\n  }\r\n  // if has response show the error\r\n  if (error.response) {\r\n    if (error.response.data.hasOwnProperty(\"ExceptionMessage\")) {\r\n      showMessage(\r\n        error.response.data.Message +\r\n          \"(\" +\r\n          error.response.data.ExceptionMessage +\r\n          \")\"\r\n      );\r\n    } else if (error.response.data.hasOwnProperty(\"Message\")) {\r\n      showMessage(error.response.data.Message);\r\n    } else if (error.response.statusText) {\r\n      showMessage(error.response.statusText);\r\n    }\r\n  }\r\n};\r\nconst showMessage = (message) => toast.error(message.toString());\r\nconst fullUrl = (uri) => baseApiUrl + uri;\r\nconst baseService = {\r\n  get: (uri, config) => {\r\n    return axios\r\n      .get(fullUrl(uri), { headers: headers, ...config })\r\n      .then((res) => res.data);\r\n  },\r\n  post: (uri, params, config) => {\r\n    return axios.post(fullUrl(uri), JSON.stringify(params), {\r\n      headers: headers,\r\n      ...config,\r\n    });\r\n  },\r\n};\r\nexport default baseService;\r\n","import * as uris from \"./serviceUris\";\r\nimport baseService from \"./baseService\";\r\nimport { data } from \"../data\";\r\nconst boxService = {\r\n  getBoxes: () => {\r\n    return baseService.get(uris.BOXES);\r\n  },\r\n  saveBoxes: (box) => {\r\n    return baseService.post(uris.BOXES, data);\r\n  },\r\n};\r\nexport default boxService;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { allCountries } from \"../../data\";\r\nimport SectionContent from \"../Styled/SectionContent\";\r\nimport Dropdown from \"../Dropdown/Dropdown\";\r\nimport boxService from \"../../services/boxService\";\r\nconst BoxForm = () => {\r\n  const defaultBoxInformation = {\r\n    receiverName: \"\",\r\n    weight: \"\",\r\n    colour: \"\",\r\n    rgbColorValue: \"\",\r\n    country: 0,\r\n  };\r\n  const [defaultBoxInfo, setDefaultBoxInfo] = useState({});\r\n  useEffect(() => {\r\n    setDefaultBoxInfo(defaultBoxInformation);\r\n  }, []);\r\n  const handleOnChange = (obj) => {\r\n    setDefaultBoxInfo((old) => ({ ...old, ...obj }));\r\n  };\r\n  let getRgbValue = (colour) => {\r\n    var value = colour.match(/[A-Za-z0-9]{2}/g);\r\n    value = value.map(function (v) {\r\n      return parseInt(v, 16);\r\n    });\r\n    return value.join(\",\");\r\n  };\r\n  const saveBox = () => {\r\n    if (validate()) {\r\n      boxService.saveBoxes(JSON.stringify(defaultBoxInfo)).then(() => {\r\n        toast.success(\"Successfully saved\");\r\n        setDefaultBoxInfo({});\r\n      });\r\n    }\r\n    return false;\r\n  };\r\n  const validate = () => {\r\n    if (\r\n      !defaultBoxInfo.receiverName ||\r\n      !defaultBoxInfo.weight ||\r\n      !defaultBoxInfo.colour ||\r\n      !defaultBoxInfo.country\r\n    ) {\r\n      toast.error(\"All fields must be filled in.\");\r\n      return false;\r\n    } else if (defaultBoxInfo.weight < 0) {\r\n      toast.error(\"Please enter valid weight in kg.\");\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <SectionContent>\r\n        <div className=\"panel-content\" style={{ width: \"50%\" }}>\r\n          <div className=\"section-title\">Boxes Information</div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"name\" className=\"required\">\r\n              Name\r\n            </label>\r\n            <input\r\n              id=\"name\"\r\n              type=\"text\"\r\n              value={defaultBoxInfo.receiverName}\r\n              onChange={(e) => {\r\n                var data = {\r\n                  ...defaultBoxInfo,\r\n                  receiverName: e.target.value,\r\n                };\r\n                handleOnChange(data);\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"weight\" className=\"required\">\r\n              Weight (in Kg.)\r\n            </label>\r\n            <input\r\n              id=\"weight\"\r\n              type=\"number\"\r\n              min=\"0\"\r\n              value={defaultBoxInfo.weight}\r\n              onChange={(e) => {\r\n                var data = {\r\n                  ...defaultBoxInfo,\r\n                  weight: e.target.value,\r\n                };\r\n                handleOnChange(data);\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"colour\" className=\"required\">\r\n              Box Colour\r\n            </label>\r\n            <input\r\n              id=\"colour\"\r\n              type=\"color\"\r\n              value={defaultBoxInfo.colour}\r\n              onChange={(e) => {\r\n                e.stopPropagation();\r\n                const color = e.target.value;\r\n                var data = {\r\n                  ...defaultBoxInfo,\r\n                  colour: color,\r\n                  rgbColorValue: getRgbValue(color),\r\n                };\r\n                handleOnChange(data);\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"drpConuntries\" className=\"required\">\r\n              Country\r\n            </label>\r\n            <Dropdown\r\n              id=\"drpConuntries\"\r\n              data={allCountries}\r\n              idField=\"id\"\r\n              textField=\"text\"\r\n              width=\"10px\"\r\n              selected={defaultBoxInfo.country}\r\n              onChange={(obj) => {\r\n                var data = { ...defaultBoxInfo, country: obj.value };\r\n                handleOnChange(data);\r\n              }}\r\n            />\r\n          </div>\r\n          <button\r\n            className=\"btn btn-success mr-3\"\r\n            onClick={saveBox}\r\n            type=\"button\"\r\n          >\r\n            Save\r\n          </button>\r\n        </div>\r\n      </SectionContent>\r\n      <ToastContainer />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BoxForm;\r\n","import styled from \"styled-components\";\r\nconst TableContent = styled.div`\r\n  max-height: 50vh;\r\n  overflow-y: auto;\r\n  table {\r\n    background: #ffffff;\r\n    border: 1px solid rgba(0, 0, 0, 0.12);\r\n    box-sizing: border-box;\r\n    border-radius: 6px;\r\n    border-spacing: 0;\r\n    width: 100%;\r\n    th {\r\n      font-weight: 500;\r\n    }\r\n    tr {\r\n      :last-child {\r\n        td {\r\n          border-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    th,\r\n    td {\r\n      margin: 0;\r\n      padding: 0.5rem 0.8rem 0.5rem 1rem;\r\n      border-bottom: 1px solid rgba(0, 0, 0, 0.12);\r\n      text-align: left;\r\n      color: #565d6e;\r\n\r\n      :last-child {\r\n        border-right: 0;\r\n      }\r\n    }\r\n    tbody {\r\n      tr {\r\n        &.disabled td {\r\n          opacity: 0.7;\r\n        }\r\n        &.disabled:hover {\r\n          background: white;\r\n          cursor: default;\r\n        }\r\n        td.disabled:after {\r\n          content: \"\";\r\n          display: block;\r\n          width: 25px;\r\n          height: 25px;\r\n          background-position: center center;\r\n          background-repeat: no-repeat;\r\n          background-image: url(./Resources/Images/Portal/locked-darkgray.svg);\r\n        }\r\n      }\r\n      tr:hover {\r\n        background: rgba(196, 196, 196, 0.15);\r\n        cursor: pointer;\r\n      }\r\n      tr.row-selected {\r\n        background-color: rgba(100, 184, 103, 0.26);\r\n        td:first-child {\r\n          border-left: 4px solid #64b867;\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport default TableContent;\r\n","import * as React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useTable, useSortBy } from \"react-table\";\r\nimport TableContent from \"../Styled/TableContent\";\r\nimport \"./Grid.scss\";\r\n\r\nconst Grid = ({ result }) => {\r\n  const [unModifiedResult, setUnModifiedResult] = useState(result);\r\n  const [data, setdata] = useState([]);\r\n  useEffect(() => {\r\n    setUnModifiedResult(result);\r\n    setdata(result.Rows);\r\n  }, [result]);\r\n  let mappedColumns = unModifiedResult.Columns.map((element) => ({\r\n    Header: element.Caption,\r\n    accessor: element.Name,\r\n    disableSortBy: !element.Sortable,\r\n    type: element.Type,\r\n    cssClass: element.CssClass,\r\n    conditionalStyling: element.conditionalStyling || null,\r\n    isBackgroundColour: element.BackgroundColour,\r\n  }));\r\n  let hideColumns = unModifiedResult.Columns.map((item) => {\r\n    if (!item.Visible) {\r\n      return item.Name;\r\n    }\r\n  });\r\n  let columns = React.useMemo(() => mappedColumns, []);\r\n  let hiddenColumns = React.useMemo(() => hideColumns, []);\r\n\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\r\n    useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        disableSortRemove: true,\r\n        initialState: {\r\n          hiddenColumns: hiddenColumns,\r\n        },\r\n      },\r\n      useSortBy\r\n    );\r\n  return (\r\n    <React.Fragment>\r\n      <TableContent>\r\n        <table {...getTableProps()} className=\"table-container\">\r\n          <thead>\r\n            {headerGroups.map((headerGroup) => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((column) => (\r\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                    {column.render(\"Header\")}\r\n                    <React.Fragment>\r\n                      {column.isSorted && (\r\n                        <span>{column.isSortedDesc ? \" 🔽\" : \" 🔼\"}</span>\r\n                      )}\r\n                    </React.Fragment>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {(rows.length > 0 &&\r\n              rows.map((row, i) => {\r\n                prepareRow(row);\r\n                return (\r\n                  <React.Fragment key={i}>\r\n                    <tr\r\n                      {...row.getRowProps()}\r\n                      key={`row_${i}`}\r\n                      onClick={\r\n                        row.original.CssClass &&\r\n                        row.original.CssClass === \"disabled\"\r\n                          ? () => {}\r\n                          : () => {\r\n                              unModifiedResult.RowClick &&\r\n                                unModifiedResult.RowClick(row.original);\r\n                            }\r\n                      }\r\n                      className={row.original.CssClass}\r\n                    >\r\n                      {row.cells.map((cell) => {\r\n                        return (\r\n                          <td\r\n                            style={\r\n                              cell.column.isBackgroundColour\r\n                                ? {\r\n                                    backgroundColor: `rgb(${row.original.colour})`,\r\n                                  }\r\n                                : {}\r\n                            }\r\n                            className={\r\n                              cell.column.cssClass +\r\n                              `${\r\n                                cell.column.conditionalStyling !== null\r\n                                  ? \" \" +\r\n                                    cell.column.conditionalStyling(row, cell)\r\n                                  : \"\"\r\n                              }`\r\n                            }\r\n                            {...cell.getCellProps()}\r\n                          >\r\n                            {cell.value ? cell.render(\"Cell\") : null}\r\n                          </td>\r\n                        );\r\n                      })}\r\n                    </tr>\r\n                  </React.Fragment>\r\n                );\r\n              })) || (\r\n              <tr>\r\n                <td className=\"text-center\">No data</td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </TableContent>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport boxService from \"../../services/boxService\";\r\nimport SectionContent from \"../Styled/SectionContent\";\r\nimport Grid from \"../Grid/Grid\";\r\n\r\nimport \"./Boxes.scss\";\r\n\r\nconst Box = () => {\r\n  const [boxes, setBoxes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getBoxes();\r\n  }, []);\r\n\r\n  var result = {\r\n    Caption: \"Box Information\",\r\n    Columns: [\r\n      {\r\n        Name: \"id\",\r\n        Caption: \"Id\",\r\n        Visible: false,\r\n        IsKey: true,\r\n      },\r\n      {\r\n        Name: \"receiverName\",\r\n        Caption: \"ReceiverName\",\r\n        Visible: true,\r\n      },\r\n      {\r\n        Name: \"weight\",\r\n        Caption: \"Weight\",\r\n        Visible: true,\r\n      },\r\n      {\r\n        Name: \"colour\",\r\n        Caption: \"Colour\",\r\n        Visible: true,\r\n        BackgroundColour: true,\r\n      },\r\n      {\r\n        Name: \"shippingCost\",\r\n        Caption: \"ShippingCost\",\r\n        Visible: true,\r\n      },\r\n    ],\r\n    RowCount: boxes.length,\r\n    Rows: boxes,\r\n    RowClick: null,\r\n  };\r\n\r\n  const getBoxes = () => {\r\n    // var data = boxService.getBoxes();\r\n    // setBoxes(data);\r\n    boxService.getBoxes().then((res) => {\r\n      setBoxes(res);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <SectionContent>\r\n        <div className=\"section-title\">Boxes Information</div>\r\n        <div className=\"customization-table\">\r\n          <Grid result={result} />\r\n        </div>\r\n      </SectionContent>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default Box;\r\n","import React from \"react\";\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\nimport BoxForm from \"./components/BoxForm/BoxForm\";\nimport Boxes from \"./components/Boxes/Boxes\";\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Boxes App</h1>\n      <BrowserRouter>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/addbox\">Add New Box</Link>\n            </li>\n            <li>\n              <Link to=\"/listboxes\">List Box</Link>\n            </li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route path=\"/\">\n            <BoxForm />\n          </Route>\n          <Route path=\"/addbox\">\n            <BoxForm />\n          </Route>\n          <Route path=\"/listboxes\">\n            <Boxes />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nexport const store = configureStore({\n  reducer: {\n    // counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport { store } from \"./store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}